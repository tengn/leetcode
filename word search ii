class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        buildTrie(words);
        List<String> res = new ArrayList<>();
        TrieNode root = buildTrie(words);
        for (int i = 0; i < board.length; i++) {
            for (int j = 0 ; j < board[0].length; j++) {
                help(board, res, i, j, root);
            }
        }
        return res;
    }
    
    private void help(char[][] board, List<String> res, int i, int j, TrieNode root) {
        char cur = board[i][j];
        
        
        if (board[i][j] == '#' || root.children[cur-'a'] == null ) {
            return;
        }
        
        board[i][j] = '#';
        root = root.children[cur-'a'];
        if (root.word != null) {
            res.add(root.word);
            root.word = null;
        }
        
        if (i > 0) {
            help(board, res, i-1, j, root);
        }
        if (j > 0) {
            help(board, res, i, j-1, root);
        }
        if (i < board.length - 1) {
            help(board, res, i+1, j, root);
        }
        if (j < board[0].length - 1) {
            help(board, res, i, j+1, root);
        }
        board[i][j] = cur;
    }
    
    private TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for (String word : words) {
            TrieNode cur = root;
            for (char c : word.toCharArray()) {
                if (cur.children[c-'a'] == null) {
                    
                    cur.children[c-'a'] = new TrieNode();

                }
                cur = cur.children[c-'a'];
            }
            cur.word = word;
        }
        return root;
    }
    
    class TrieNode {
        String word;
        TrieNode[] children;
        public TrieNode() {
            children = new TrieNode[26];
        }
    }
}
