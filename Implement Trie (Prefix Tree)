class Trie {
    TrieNode root;
    class TrieNode {
        TrieNode[] children;
        String word;
        public TrieNode() {
            children = new TrieNode[26];
        }
    }
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode curRoot = root;
        for (char c : word.toCharArray()) {
            if (curRoot.children[c-'a'] == null) {
                curRoot.children[c-'a'] = new TrieNode();
            }
            curRoot = curRoot.children[c-'a'];
        }
        curRoot.word = word;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode curRoot = root;
        for (char c : word.toCharArray()) {
            if (curRoot.children[c-'a'] == null) {
                return false;
            }
            curRoot = curRoot.children[c-'a'];
        }
        return curRoot.word != null;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode curRoot = root;
        for (char c : prefix.toCharArray()) {
            if (curRoot.children[c-'a'] == null) {
                return false;
            }
            curRoot = curRoot.children[c-'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
